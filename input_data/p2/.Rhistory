)
top_n <- 10
res_df <- res_df %>%
arrange(desc(abs(log2FoldChange))) %>%
mutate(top10 = ifelse(row_number() <= top_n, TRUE, FALSE))
volcano_plot <- ggplot(res_df, aes(x = log2FoldChange, y = -log10(padj), color = category)) +
geom_point(size = 0.75) +
scale_color_manual(values = c("gray", "purple", "orange"), labels = c("Not significant", "Downregulated", "Upregulated")) +
labs(x = "Log2 Fold Change", y = "-Log10 Adjusted p-value", color = "Category") +
theme_minimal() +
theme(
legend.position = "right",
legend.title = element_text(size = 12),
legend.text = element_text(size = 12),  # Increase the size of legend text
legend.key.size = unit(1.5, "lines"),   # Increase the size of legend points
panel.grid.major = element_line(color = "grey80"),
panel.grid.minor = element_line(color = "grey90"),
panel.border = element_rect(color = "black", fill = NA, size = 1)
) +
geom_text_repel(
data = subset(res_df, top10 & category != "Not significant"),
aes(label = rownames(subset(res_df, top10 & category != "Not significant"))),
color = "black",
size = 3
)
print(volcano_plot)
knitr::opts_chunk$set(echo = TRUE)
#libraries for Questions i-vi
library(DESeq2)        # for differential expression analysis using RNA-seq data
library(ggplot2)       # for creating complex and customizable data visualizations
#libraries for shiny app Question vii
library(shiny)         # for building interactive web applications in R
library(shinythemes)   # for adding themes to shiny applications
library(tidyr)         # for tidying data, making it easier to manipulate
library(dplyr)         # for data manipulation and transformation
# Extract normalized counts for SRRM4
srrm4_id <- "ENSG00000139767"
normalized_counts <- counts(dds, normalized=TRUE)
srrm4_counts <- normalized_counts[srrm4_id, ]
srrm4_data <- data.frame(
count = srrm4_counts,
diagnosis = colData(dds)$diagnosis
)
# Plotting SRRM4 normalized counts
srrm4_plot <- ggplot(srrm4_data, aes(x = diagnosis, y = count)) +
geom_boxplot() +
geom_jitter(aes(color = diagnosis), width = 0.2, alpha = 0.6) +
labs(
title = "SRRM4 Expression",
x = "Diagnosis",
y = "Normalized Count"
) +
theme_bw() +
theme(
plot.title = element_text(hjust = 0.5),
legend.position = "none"
)
print(srrm4_plot)
B) In this case I used normalized counts for the gene expression comparison as raw counts from sequencng  can have high variability and this could mislead me by not accurately reflecting the real differences between the samples either due to differences in sequencing depth or other factors.
# Extract normalized counts for SRRM4
srrm4_id <- "ENSG00000139767"
normalized_counts <- counts(dds, normalized=TRUE)
srrm4_counts <- normalized_counts[srrm4_id, ]
srrm4_data <- data.frame(
count = srrm4_counts,
diagnosis = colData(dds)$diagnosis
)
# Plotting SRRM4 normalized counts
srrm4_plot <- ggplot(srrm4_data, aes(x = diagnosis, y = count)) +
geom_boxplot() +
geom_jitter(aes(color = diagnosis), width = 0.2, alpha = 0.6) +
labs(
title = "SRRM4 Expression",
x = "Diagnosis",
y = "Normalized Count"
) +
theme_bw() +
theme(
plot.title = element_text(hjust = 0.5),
legend.position = "none"
)
print(srrm4_plot)
# Extract normalized counts for SRRM4
srrm4_id <- "ENSG00000139767"
normalized_counts <- counts(dds, normalized=TRUE)
srrm4_counts <- normalized_counts[srrm4_id, ]
srrm4_data <- data.frame(
count = srrm4_counts,
diagnosis = colData(dds)$diagnosis
)
# Plotting SRRM4 normalized counts
srrm4_plot <- ggplot(srrm4_data, aes(x = diagnosis, y = count)) +
geom_boxplot() +
geom_jitter(aes(color = diagnosis), width = 0.2, alpha = 0.6) +
labs(
title = "SRRM4 Expression",
x = "Diagnosis",
y = "Normalized Count"
) +
theme_bw() +
theme(
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 0, hjust = 0.5),
legend.position = "none"
)
print(srrm4_plot)
# Extract normalized counts for SRRM4
srrm4_id <- "ENSG00000139767"
normalized_counts <- counts(dds, normalized=TRUE)
srrm4_counts <- normalized_counts[srrm4_id, ]
srrm4_data <- data.frame(
count = srrm4_counts,
diagnosis = colData(dds)$diagnosis
)
# Plotting SRRM4 normalized counts
srrm4_plot <- ggplot(srrm4_data, aes(x = diagnosis, y = count)) +
geom_boxplot() +
geom_jitter(aes(color = diagnosis), width = 0.2, alpha = 0.6) +
labs(
title = "SRRM4 Expression",
x = "Diagnosis",
y = "Normalized Count"
) +
theme_bw() +
theme(
plot.title = element_text(hjust = 0.5),
legend.position = "none"
)
print(srrm4_plot)
# Ensure that DESeq2, ggplot2, and other necessary libraries are loaded
library(DESeq2)
library(ggplot2)
# Extract normalized counts for SRRM4
srrm4_id <- "ENSG00000139767"
normalized_counts <- counts(dds, normalized=TRUE)
srrm4_counts <- normalized_counts[srrm4_id, ]
srrm4_data <- data.frame(
count = srrm4_counts,
diagnosis = colData(dds)$diagnosis
)
# Plotting SRRM4 normalized counts
srrm4_plot <- ggplot(srrm4_data, aes(x = diagnosis, y = count)) +
geom_boxplot() +
geom_jitter(aes(color = diagnosis), width = 0.2, alpha = 0.6) +
labs(
title = "SRRM4 Expression",
x = "Diagnosis",
y = "Normalized Count"
) +
theme_bw() +
theme(
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 0, hjust = 0.5),
legend.position = "none"
)
print(srrm4_plot))
# Ensure that DESeq2, ggplot2, and other necessary libraries are loaded
library(DESeq2)
library(ggplot2)
# Extract normalized counts for SRRM4
srrm4_id <- "ENSG00000139767"
normalized_counts <- counts(dds, normalized=TRUE)
srrm4_counts <- normalized_counts[srrm4_id, ]
srrm4_data <- data.frame(
count = srrm4_counts,
diagnosis = colData(dds)$diagnosis
)
# Plotting SRRM4 normalized counts
srrm4_plot <- ggplot(srrm4_data, aes(x = diagnosis, y = count)) +
geom_boxplot() +
geom_jitter(aes(color = diagnosis), width = 0.2, alpha = 0.6) +
labs(
title = "SRRM4 Expression",
x = "Diagnosis",
y = "Normalized Count"
) +
theme_bw() +
theme(
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 0, hjust = 0.5),
legend.position = "none"
)
print(srrm4_plot)
get ensembl_id from name
# Extract normalized counts for SRRM4
srrm4_id <- "ENSG00000139767" # SRRM4 gene ID
srrm4_data <- plotCounts(dds, gene = srrm4_id, intgroup = "diagnosis", returnData = TRUE)
# Plotting SRRM4 normalized counts
srrm4_plot <- ggplot(srrm4_data, aes(x = diagnosis, y = count)) +
geom_boxplot() +
geom_jitter(aes(color = diagnosis), width = 0.2, alpha = 0.4) +
labs(
title = "SRRM4",
x = "Diagnosis",
y = "Normalized count"
) +
guides(col = "none") +
theme_bw() +
theme(
plot.title = element_text(hjust = 0.5)
)
print(srrm4_plot)
# Extract normalized counts for SRRM4
srrm4_id <- "ENSG00000139767" # SRRM4 gene ID
srrm4_data <- plotCounts(dds, gene = srrm4_id, intgroup = "diagnosis", returnData = TRUE)
# Plotting SRRM4 normalized counts
srrm4_plot <- ggplot(srrm4_data, aes(x = diagnosis, y = count)) +
geom_boxplot() +
geom_jitter(aes(color = diagnosis), width = 0.15, alpha = 0.6) +
labs(
title = "SRRM4",
x = "Diagnosis",
y = "Normalized count"
) +
guides(col = "none") +
theme_bw() +
theme(
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 0, hjust = 0.5)
)
print(srrm4_plot)
# Ensure that DESeq2, ggplot2, and other necessary libraries are loaded
library(DESeq2)
library(ggplot2)
# Extract normalized counts for SRRM4
srrm4_id <- "ENSG00000139767" # SRRM4 gene ID
srrm4_data <- plotCounts(dds, gene = srrm4_id, intgroup = "diagnosis", returnData = TRUE)
# Plotting SRRM4 normalized counts
srrm4_plot <- ggplot(srrm4_data, aes(x = diagnosis, y = count)) +
geom_boxplot() +
geom_jitter(aes(color = diagnosis), width = 0.15, alpha = 0.6) +
labs(
title = "SRRM4",
x = "Diagnosis",
y = "Normalized count"
) +
guides(col = "none") +
theme_bw() +
theme(
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 0, hjust = 0.5)
)
print(srrm4_plot)
# Ensure that DESeq2, ggplot2, and other necessary libraries are loaded
library(DESeq2)
library(ggplot2)
# Extract normalized counts for SRRM4
srrm4_id <- "ENSG00000139767" # SRRM4 gene ID
srrm4_data <- plotCounts(dds, gene = srrm4_id, intgroup = "diagnosis", returnData = TRUE)
# Adjust the appearance of the plot
srrm4_plot <- ggplot(srrm4_data, aes(x = diagnosis, y = count)) +
geom_boxplot(outlier.shape = NA) +  # Remove outliers from the boxplot to avoid overlapping with jitter points
geom_jitter(aes(color = diagnosis), width = 0.15, alpha = 0.6, size = 2) +
labs(
title = "SRRM4",
x = "Diagnosis",
y = "Normalized count"
) +
guides(col = "none") +
theme_bw() +
theme(
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 0, hjust = 0.5)
)
print(srrm4_plot)
# Extract normalized counts for SRRM4
normalized_counts <- counts(dds, normalized = TRUE)
srrm4_counts <- normalized_counts["ENSG00000139767", ]
# Prepare data for plotting
plot_data <- data.frame(
diagnosis = colData(dds)$diagnosis,
count = srrm4_counts
)
# Plot the boxplot
ggplot(plot_data, aes(x = diagnosis, y = count)) +
geom_boxplot() +
geom_jitter(aes(color = diagnosis), width = 0.2, size = 2, alpha = 0.6) +
labs(title = "SRRM4 Expression", x = "Diagnosis", y = "Normalized Count") +
theme_minimal()
#check variable types and convert character variables to factors
str(metadata)
metadata <- metadata %>%
mutate(across(where(is.character), as.factor))
#check changes
str(metadata)
#rerun dds
dds <- DESeqDataSetFromMatrix(countData = count_data,
colData = metadata,
design = ~ diagnosis)
#reveal diagnosis factor, by specifying reference level (set control group as reference)
dds$diagnosis <- relevel(dds$diagnosis, ref = "CTL")
#filter out low read counts (10 set as threshold commonly used in RNA-seq analysis to balance between rmv noise but retain potential genes of interest)
dds <- dds[rowSums(counts(dds)) > 10, ]
#run pipeline (this also normalizes data as DESeq interlaly estimates disperions, size factors and fits the model to perform the analysis)
dds <- DESeq(dds)
#count
num_diff_expressed <- sum(res(dds)$padj < 0.05, na.rm=TRUE)
#display results
res<- results(dds)
#display results
res<- results(dds)
#count
num_diff_expressed <- sum(res(dds)$padj < 0.05, na.rm=TRUE)
#count
num_diff_expressed <- sum(res(dds)$padj < 0.05, na.rm=TRUE)
knitr::opts_chunk$set(echo = TRUE)
#libraries for Questions i-vi
library(DESeq2)        # for differential expression analysis using RNA-seq data
library(ggplot2)       # for creating complex and customizable data visualizations
#libraries for shiny app Question vii
library(shiny)         # for building interactive web applications in R
library(shinythemes)   # for adding themes to shiny applications
library(tidyr)         # for tidying data, making it easier to manipulate
library(dplyr)         # for data manipulation and transformation
knitr::opts_chunk$set(echo = TRUE)
#libraries for Questions i-vi
library(DESeq2)        # for differential expression analysis using RNA-seq data
library(ggplot2)       # for creating complex and customizable data visualizations
#libraries for shiny app Question vii
library(shiny)         # for building interactive web applications in R
library(shinythemes)   # for adding themes to shiny applications
library(tidyr)         # for tidying data, making it easier to manipulate
library(dplyr)         # for data manipulation and transformation
knitr::opts_chunk$set(echo = TRUE)
#libraries for Questions i-vi
library(DESeq2)        # for differential expression analysis using RNA-seq data
library(ggplot2)       # for creating complex and customizable data visualizations
#libraries for shiny app Question vii
library(shiny)         # for building interactive web applications in R
library(shinythemes)   # for adding themes to shiny applications
library(tidyr)         # for tidying data, making it easier to manipulate
library(dplyr)         # for data manipulation and transformation
knitr::opts_chunk$set(echo = TRUE)
#libraries for Questions i-vi
library(DESeq2)        # for differential expression analysis using RNA-seq data
library(ggplot2)       # for creating complex and customizable data visualizations
#libraries for shiny app Question vii
library(shiny)         # for building interactive web applications in R
library(shinythemes)   # for adding themes to shiny applications
library(tidyr)         # for tidying data, making it easier to manipulate
library(dplyr)         # for data manipulation and transformation
knitr::opts_chunk$set(echo = TRUE)
#libraries for Questions i-vi
library(DESeq2)        # for differential expression analysis using RNA-seq data
library(ggplot2)       # for creating complex and customizable data visualizations
#libraries for shiny app Question vii
library(shiny)         # for building interactive web applications in R
library(shinythemes)   # for adding themes to shiny applications
library(tidyr)         # for tidying data, making it easier to manipulate
library(dplyr)         # for data manipulation and transformation
knitr::opts_chunk$set(echo = TRUE)
#libraries for Questions i-vi
library(DESeq2)        # for differential expression analysis using RNA-seq data
library(ggplot2)       # for creating complex and customizable data visualizations
#libraries for shiny app Question vii
library(shiny)         # for building interactive web applications in R
library(shinythemes)   # for adding themes to shiny applications
library(tidyr)         # for tidying data, making it easier to manipulate
library(dplyr)         # for data manipulation and transformation
knitr::opts_chunk$set(echo = TRUE)
#libraries for Questions i-vi
library(DESeq2)        # for differential expression analysis using RNA-seq data
library(ggplot2)       # for creating complex and customizable data visualizations
#libraries for shiny app Question vii
library(shiny)         # for building interactive web applications in R
library(shinythemes)   # for adding themes to shiny applications
library(tidyr)         # for tidying data, making it easier to manipulate
library(dplyr)         # for data manipulation and transformation
knitr::opts_chunk$set(echo = TRUE)
#libraries for Questions i-vi
library(DESeq2)        # for differential expression analysis using RNA-seq data
library(ggplot2)       # for creating complex and customizable data visualizations
#libraries for shiny app Question vii
library(shiny)         # for building interactive web applications in R
library(shinythemes)   # for adding themes to shiny applications
library(tidyr)         # for tidying data, making it easier to manipulate
library(dplyr)         # for data manipulation and transformation
#check and set correct working directory
print(getwd())
setwd("/Users/andrejhric/Desktop/omics_coursework/input_data/p2")
#loading count data (containing gene expression counts for each sample)
count_data <- read.table("GSE64018_countlevel_12asd_12ctl_edited.txt", header = TRUE, row.names = 1)
#loading metadata txt file
metadata <- read.table("metadata.txt", header = TRUE, row.names = 1)
#create DESeqDataSet object
dds <- DESeqDataSetFromMatrix(countData = count_data,
colData = metadata,
design = ~ diagnosis)
#check variable types and convert character variables to factors
str(metadata)
metadata <- metadata %>%
mutate(across(where(is.character), as.factor))
#check changes
str(metadata)
#check variable types and convert character variables to factors
str(metadata)
metadata <- metadata %>%
mutate(across(where(is.character), as.factor))
#check changes
str(metadata)
#rerun dds
dds <- DESeqDataSetFromMatrix(countData = count_data,
colData = metadata,
design = ~ diagnosis)
#reveal diagnosis factor, by specifying reference level (set control group as reference)
dds$diagnosis <- relevel(dds$diagnosis, ref = "CTL")
#filter out low read counts (10 set as threshold commonly used in RNA-seq analysis to balance between removing noise but retaining potential genes of interest)
dds <- dds[rowSums(counts(dds)) > 10, ]
#run pipeline (this also normalizes data as DESeq internally estimates dispersions, size factors, and fits the model to perform the analysis)
dds <- DESeq(dds)
#display results
res<- results(dds)
#count
num_diff_expressed <- sum(res$padj < 0.05, na.rm=TRUE)
#print result of counting
cat("total number of differentially expressed genes (padj < 0.05):", num_diff_expressed, "\n")
#count differentially expressed genes with padj < 0.05
num_diff_expressed <- sum(res$padj < 0.05, na.rm=TRUE)
#count upregulated genes (padj < 0.05 and log2FoldChange > 0)
num_upregulated <- sum(res$padj < 0.05 & res$log2FoldChange > 0, na.rm=TRUE)
#count downregulated genes (padj < 0.05 and log2FoldChange < 0)
num_downregulated <- sum(res$padj < 0.05 & res$log2FoldChange < 0, na.rm=TRUE)
#print results
cat("number of upregulated genes (padj < 0.05):", num_upregulated, "\n")
cat("number of downregulated genes (padj < 0.05):", num_downregulated, "\n")
cat("total number of differentially expressed genes (padj < 0.05):", num_diff_expressed, "\n")
#convert results to a data frame for ggplot2
res_df <- as.data.frame(res)
#remove rows with NA in the adjusted p-value column to avoid errors
res_df <- res_df %>% drop_na(padj)
#add column to indicate significant genes (adjusted p-value < 0.05)
res_df <- mutate(res_df, sig = ifelse(padj < 0.05, "significant", "not significant"))
#add column to indicate the top 10 signif genes
top_n <- 10
res_df <- res_df %>%
arrange(desc(abs(log2FoldChange))) %>%
mutate(top10 = ifelse(row_number() <= top_n, TRUE, FALSE))
#create volano plot
volcano_plot <- ggplot(res_df, aes(x = log2FoldChange, y = -log10(padj), color = sig)) +
geom_point(size = 0.75) +
scale_color_manual(values = c("black", "blue"), labels = c("not significant", "fdr<0.05")) +
labs(x = "log2 fold change", y = "-log10 adjusted p-value", color = "significance") +
theme_minimal() +
theme(
legend.position = "right",
legend.title = element_text(size = 12),
legend.text = element_text(size = 12),  # increase the size of legend text
legend.key.size = unit(1.5, "lines"),   # increase the size of legend points
panel.grid.major = element_line(color = "grey80"),
panel.grid.minor = element_line(color = "grey90"),
panel.border = element_rect(color = "black", fill = NA, size = 1)
) +
geom_text_repel(
data = subset(res_df, top10 & sig == "significant"),
aes(label = rownames(subset(res_df, top10 & sig == "significant"))),
color = "black",
size = 3
)
#print output
print(volcano_plot)
#all steps as before
res_df <- as.data.frame(res)
res_df <- res_df %>% drop_na(padj)
#add categorization of genes
res_df <- res_df %>%
mutate(
category = case_when(
padj < 0.05 & log2FoldChange > 0 ~ "upregulated",
padj < 0.05 & log2FoldChange < 0 ~ "downregulated",
TRUE ~ "not significant"
)
)
top_n <- 10
res_df <- res_df %>%
arrange(desc(abs(log2FoldChange))) %>%
mutate(top10 = ifelse(row_number() <= top_n, TRUE, FALSE))
volcano_plot <- ggplot(res_df, aes(x = log2FoldChange, y = -log10(padj), color = category)) +
geom_point(size = 0.75) +
scale_color_manual(values = c("gray", "purple", "orange"), labels = c("not significant", "downregulated", "upregulated")) +
labs(x = "log2 fold change", y = "-log10 adjusted p-value", color = "category") +
theme_minimal() +
theme(
legend.position = "right",
legend.title = element_text(size = 12),
legend.text = element_text(size = 12),  # increase the size of legend text
legend.key.size = unit(1.5, "lines"),   # increase the size of legend points
panel.grid.major = element_line(color = "grey80"),
panel.grid.minor = element_line(color = "grey90"),
panel.border = element_rect(color = "black", fill = NA, size = 1)
) +
geom_text_repel(
data = subset(res_df, top10 & category != "not significant"),
aes(label = rownames(subset(res_df, top10 & category != "not significant"))),
color = "black",
size = 3
)
print(volcano_plot)
#extract normalized counts for srrm4
normalized_counts <- counts(dds, normalized = TRUE)
srrm4_counts <- normalized_counts["ENSG00000139767", ]
#prepare data for plotting
plot_data <- data.frame(
diagnosis = colData(dds)$diagnosis,
count = srrm4_counts
)
#plot the boxplot
ggplot(plot_data, aes(x = diagnosis, y = count)) +
geom_boxplot() +
geom_jitter(aes(color = diagnosis), width = 0.2, size = 2, alpha = 0.6) +
labs(title = "srrm4 expression", x = "diagnosis", y = "normalized count") +
theme_minimal() +
stat_summary(fun = mean, geom = "point", shape = 20, size = 3, color = "red", fill = "red")
